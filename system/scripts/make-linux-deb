#!/bin/bash
set -euo pipefail
bash -n "$(command -v "$0")"
set -x

LINUX=$1
TARGET=$2
DST=$3

# KERNEL_COMMIT=`env -C ${LINUX} git rev-parse --short HEAD`
# KERNEL_CONFIG_MD5SUM=`md5sum ${LINUX}/.config | awk '{ print $1 }'`
# LOCALVERSION=${LOCALVERSION:--${USER}+${KERNEL_COMMIT}+${KERNEL_CONFIG_MD5SUM}}
MAKE=${MAKE:-make -j `getconf _NPROCESSORS_ONLN`}

# Determine the kernel release and build version our package will have.
env - PATH=${PATH} ${MAKE} -C ${LINUX} include/config/kernel.release
KERNEL_RELEASE=`cat ${LINUX}/include/config/kernel.release`

env - CCACHE_DIR=${CCACHE_DIR} PATH=${PATH} \
    ${MAKE} -C ${LINUX} ${TARGET}
ccache -s

if [[ "${TARGET}" != "bindeb-pkg" ]]
then
    exit 0
fi

if [ -f ${LINUX}/.version ]
then
    KBUILD_BUILD_VERSION=`cat ${LINUX}/.version`
else
    KBUILD_BUILD_VERSION=1
fi

rm -rfd "${DST}"
mkdir -p "${DST}"

set +e
mv linux-${KERNEL_RELEASE}_${KERNEL_RELEASE}-${KBUILD_BUILD_VERSION}_amd64.buildinfo "${DST}linux_amd64.buildinfo"
mv linux-${KERNEL_RELEASE}_${KERNEL_RELEASE}-${KBUILD_BUILD_VERSION}_amd64.changes "${DST}linux_amd64.changes"
mv linux-upstream_${KERNEL_RELEASE}-${KBUILD_BUILD_VERSION}_amd64.buildinfo "${DST}linux_amd64.buildinfo"
mv linux-upstream_${KERNEL_RELEASE}-${KBUILD_BUILD_VERSION}_amd64.changes "${DST}linux_amd64.changes"
mv linux-headers-${KERNEL_RELEASE}_${KERNEL_RELEASE}-${KBUILD_BUILD_VERSION}_amd64.deb "${DST}linux-headers_amd64.deb"
mv linux-image-${KERNEL_RELEASE}_${KERNEL_RELEASE}-${KBUILD_BUILD_VERSION}_amd64.deb "${DST}linux-image_amd64.deb"
mv linux-image-${KERNEL_RELEASE}-dbg_${KERNEL_RELEASE}-${KBUILD_BUILD_VERSION}_amd64.deb "${DST}linux-image-dbg_amd64.deb"
mv linux-libc-dev_${KERNEL_RELEASE}-${KBUILD_BUILD_VERSION}_amd64.deb "${DST}linux-libc-dev_amd64.deb"
echo ${KERNEL_RELEASE} > "${DST}kernel.release"
set -e
